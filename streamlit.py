# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13OUFz3MnbHBhoEw99Qfvyx1R7NEqhyn0
"""

!pip install -q streamlit

!npm install localtunnel

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# 
# import streamlit as st
# import tensorflow as tf
# import numpy as np
# import os
# 
# # Function to load model
# def load_model():
#     try:
#         model_path = '/content/drive/MyDrive/detect.hdf5'  # Update this to your model file path if necessary
#         if not os.path.exists(model_path):
#             st.error(f"Model file not found: {model_path}")
#             return None
#         model = tf.keras.models.load_model(model_path, compile=False)
#         return model
#     except Exception as e:
#         st.error(f"Error loading the model: {e}")
#         return None
# 
# # TensorFlow Model Prediction
# def model_prediction(model, test_image):
#     try:
#         image = tf.keras.preprocessing.image.load_img(test_image, target_size=(256, 256))  # Ensure target size matches your model's input size
#         input_arr = tf.keras.preprocessing.image.img_to_array(image)
#         input_arr = np.array([input_arr])  # Convert single image to batch
#         predictions = model.predict(input_arr)
#         return np.argmax(predictions)  # Return index of max element
#     except Exception as e:
#         st.error(f"Error during prediction: {e}")
#         return None
# 
# # Load model once at the start
# model = load_model()
# 
# # Sidebar
# st.sidebar.title("Dashboard")
# app_mode = st.sidebar.selectbox("Select Page", ["Home", "About", "Disease Recognition"])
# 
# # Main Page
# if app_mode == "Home":
#     st.header("GRAPES DISEASES RECOGNITION SYSTEM")
#     image_path = "/content/drive/MyDrive/Girl Drone manual.jpg"
#     if os.path.exists(image_path):
#         st.image(image_path, use_column_width=True)
#     else:
#         st.warning("Home page image not found.")
#     st.markdown("""
#     Welcome to the Grapes Diseases Recognition System! 🌿🔍
# 
#     Our mission is to help in identifying plant diseases efficiently. Upload an image of a plant, and our system will analyze it to detect any signs of diseases. Together, let's protect our crops and ensure a healthier harvest!
# 
#     ### How It Works
#     1. **Upload Image:** Go to the **Disease Recognition** page and upload an image of a plant with suspected diseases.
#     2. **Analysis:** Our system will process the image using advanced algorithms to identify potential diseases.
#     3. **Results:** View the results and recommendations for further action.
# 
#     ### Why Choose Us?
#     - **Accuracy:** Our system utilizes state-of-the-art machine learning techniques for accurate disease detection.
#     - **User-Friendly:** Simple and intuitive interface for seamless user experience.
#     - **Fast and Efficient:** Receive results in seconds, allowing for quick decision-making.
# 
#     ### Get Started
#     Click on the **Disease Recognition** page in the sidebar to upload an image and experience the power of our Grapes Diseases Recognition System!
# 
#     ### About Us
#     Learn more about the dataset, our team, and our goals on the **About** page.
#     """)
# 
# # About Project
# elif app_mode == "About":
#     st.header("About")
#     st.markdown("""
#     #### Our Team
# 
#     1. Vaishnavi Kotwal
#     2. Tejashree Khadangale
#     3. Dhanashree Bhoyate
#     4. Madhuri Chavan
# 
#     #### Our Goals
#     **A. Present Goals**
# 
#     1. Accurate Disease Detection:
# 
#     Deploy a reliable CNN model for grape disease detection.
#     Ensure real-time image processing with a maximum latency of 5-10 seconds.
# 
#     2. User-Friendly Interface:
# 
#     Develop an intuitive interface accessible via web browsers and mobile applications.
#     Incorporate interactive maps, dashboards, and data visualization tools.
# 
#     3. Seamless Drone Integration:
# 
#     Ensure efficient data collection with drones equipped with high-resolution cameras and GPS.
#     Implement autonomous drone operations for routine surveillance and data capture.
# 
#     **B. Future Goals**
# 
#     1. Enhanced Disease Detection and Analysis:
# 
#     Continuously improve AI models for greater accuracy and reliability.
#     Expand detection capabilities to include more types of diseases and pests.
# 
#     2. Scalability and Expansion:
# 
#     Scale the system to handle large vineyards with thousands of grapevines.
#     Expand the system's reach globally, adapting to different grape varieties and growing conditions.
# 
#     3. Integrated Vineyard Management:
# 
#     Integrate with other vineyard management tools for a comprehensive solution.
#     Develop automated spraying mechanisms to precisely target infected areas.
# 
#     #### About Dataset
#     This dataset is recreated using offline augmentation from the original dataset.The original dataset can be found on this kaggle repo.
#     This dataset consists of about 4500 rgb images of healthy and diseased crop leaves which is categorized into 4 different classes.The total dataset is divided into 80/20 ratio of training and validation set preserving the directory structure.
#     A new directory containing 30 test images is created later for prediction purpose.
#     #### Content
#     1. train (4000 images)
#     2. test (30 images)
#     """)
# 
# # Prediction Page
# elif app_mode == "Disease Recognition":
#     st.header("Disease Recognition")
# 
#     # Image uploader
#     st.subheader("Upload Image")
#     test_image = st.file_uploader("Choose an Image:", type=["jpg", "jpeg", "png"])
# 
#     if st.button("Show Image"):
#         if test_image is not None:
#             st.image(test_image, use_column_width=True)
#         else:
#             st.warning("Please upload an image first.")
# 
#     # Predict button
#     if st.button("Predict"):
#         if test_image is not None and model is not None:
#             st.snow()
#             st.write("Our Prediction")
#             result_index = model_prediction(model, test_image)
#             if result_index is not None:
#                 # Reading Labels
#                 class_name = ['Grape___Black_rot', 'Grape___Esca_(Black_Measles)', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Grape___healthy']
#                 st.success("Model is Predicting it's a {}".format(class_name[result_index]))
#             else:
#                 st.error("Failed to make a prediction.")
#         elif model is None:
#             st.warning("Model failed to load.")
#         else:
#             st.warning("Please upload an image first.")
# 
#

import urllib
print("Password/Endpoint IP for localtunnel is:", urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

!streamlit run app.py &>/content/logs.txt &
!npx localtunnel --port 8501